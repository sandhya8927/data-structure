#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

// Stack structure
typedef struct {
    int capacity;
    int top;
    int *array;
} Stack;

// Initialize a stack
Stack *createStack(int capacity) {
    Stack *stack = (Stack *)malloc(sizeof(Stack));
    stack->capacity = capacity;
    stack->top = -1;
    stack->array = (int *)malloc(stack->capacity * sizeof(int));
    return stack;
}

// Check if the stack is full
bool isFull(Stack *stack) {
    return stack->top == stack->capacity - 1;
}

// Check if the stack is empty
bool isEmpty(Stack *stack) {
    return stack->top == -1;
}

// Push an element to the stack
void push(Stack *stack, int item) {
    if (isFull(stack)) {
        return;
    }
    stack->array[++stack->top] = item;
}

// Pop an element from the stack
int pop(Stack *stack) {
    if (isEmpty(stack)) {
        return -1; // Assuming -1 as an indicator of an empty stack
    }
    return stack->array[stack->top--];
}

// Peek the top element of the stack
int peek(Stack *stack) {
    if (isEmpty(stack)) {
        return -1; // Assuming -1 as an indicator of an empty stack
    }
    return stack->array[stack->top];
}

// Queue using two stacks
typedef struct {
    Stack *stack1;
    Stack *stack2;
} MyQueue;

// Initialize the queue
MyQueue* myQueueCreate() {
    MyQueue *queue = (MyQueue *)malloc(sizeof(MyQueue));
    queue->stack1 = createStack(1000); // Adjust capacity as needed
    queue->stack2 = createStack(1000);
    return queue;
}

// Push element x to the back of the queue
void myQueuePush(MyQueue* obj, int x) {
    while (!isEmpty(obj->stack1)) {
        push(obj->stack2, pop(obj->stack1));
    }
    push(obj->stack1, x);
    while (!isEmpty(obj->stack2)) {
        push(obj->stack1, pop(obj->stack2));
    }
}

// Removes the element from the front of the queue and returns it
int myQueuePop(MyQueue* obj) {
    if (isEmpty(obj->stack1)) {
        return -1; // Assuming -1 as an indicator of an empty queue
    }
    return pop(obj->stack1);
}

// Get the front element
int myQueuePeek(MyQueue* obj) {
    if (isEmpty(obj->stack1)) {
        return -1; // Assuming -1 as an indicator of an empty queue
    }
    return peek(obj->stack1);
}

// Returns whether the queue is empty
bool myQueueEmpty(MyQueue* obj) {
    return isEmpty(obj->stack1);
}

// Free memory
void myQueueFree(MyQueue* obj) {
    free(obj->stack1->array);
    free(obj->stack1);
    free(obj->stack2->array);
    free(obj->stack2);
    free(obj);
}

int main() {
    MyQueue* myQueue = myQueueCreate();
    myQueuePush(myQueue, 1);
    myQueuePush(myQueue, 2);
    printf("%d\n", myQueuePeek(myQueue));
    printf("%d\n", myQueuePop(myQueue));
    printf("%d\n", myQueueEmpty(myQueue));
    myQueueFree(myQueue);
    return 0;
}
