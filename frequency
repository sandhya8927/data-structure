#include <stdio.h>
#include <stdlib.h>

// Definition of a node in the binary search tree
struct TreeNode {
    int data;
    int freq;  // Frequency of occurrence
    struct TreeNode *left;
    struct TreeNode *right;
};

// Function to create a new node
struct TreeNode* newNode(int data) {
    struct TreeNode* node = (struct TreeNode*)malloc(sizeof(struct TreeNode));
    node->data = data;
    node->freq = 1; // Initialize frequency to 1 (since it's the first occurrence)
    node->left = NULL;
    node->right = NULL;
    return node;
}

// Function to insert a new node with given key in BST
struct TreeNode* insert(struct TreeNode* node, int data) {
    // If the tree is empty, return a new node
    if (node == NULL) return newNode(data);

    // Otherwise, recur down the tree
    if (data < node->data)
        node->left = insert(node->left, data);
    else if (data > node->data)
        node->right = insert(node->right, data);
    else // If data is already present, increment its frequency
        (node->freq)++;

    // return the (unchanged) node pointer
    return node;
}

// Function to do inorder traversal of BST
void inorderTraversal(struct TreeNode* node) {
    if (node != NULL) {
        inorderTraversal(node->left);
        printf("%d(%d) ", node->data, node->freq);
        inorderTraversal(node->right);
    }
}

// Driver program to test the above functions
int main() {
    struct TreeNode* root = NULL;
    root = insert(root, 50);
    insert(root, 30);
    insert(root, 20);
    insert(root, 40);
    insert(root, 70);
    insert(root, 60);
    insert(root, 80);
    insert(root, 70); // Inserting duplicate value to test frequency

    // print inorder traversal of the BST
    printf("Inorder traversal of the BST with frequencies: ");
    inorderTraversal(root);
    printf("\n");

    return 0;
}
